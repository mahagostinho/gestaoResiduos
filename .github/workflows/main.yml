name: CI/CD Pipeline

# Define em quais branches o pipeline será acionado (main e staging)
on:
  push:
    branches:
      - main
      - staging

jobs:
  # Etapa de build usando Maven
  build:
    runs-on: ubuntu-latest

    steps:
      # Etapa 1: Fazer checkout do código
      - name: Check out the code
        uses: actions/checkout@v3

      # Etapa 2: Configurar o JDK 17
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'

      # Etapa 3: Build do projeto usando Maven
      - name: Build with Maven
        run: |
          mvn clean install
          
      # Etapa 4: Verificar se o build foi bem-sucedido
      - name: Verify build
        run: |
          mvn verify
          
      # Etapa 5: Salvar artefato de build (opcional)
      - name: Save Build Artifact
        uses: actions/upload-artifact@v3
        with:
          name: jar-file
          path: target/*.jar

  # Etapa de deploy no ambiente de Staging
  deploy-staging:
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/staging'  # Apenas para branch 'staging'
    steps:
      # Etapa 1: Deploy usando Docker Compose para Staging
      - name: Deploy to Staging with Docker Compose
        run: |
          ssh user@staging-server "cd /path/to/staging && git pull && docker-compose down && docker-compose up -d --build"
          
  # Etapa de deploy no ambiente de Produção
  deploy-production:
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/main'  # Apenas para branch 'main'
    steps:
      # Etapa 1: Deploy usando Docker Compose para Produção
      - name: Deploy to Production with Docker Compose
        run: |
          ssh user@production-server "cd /path/to/production && git pull && docker-compose down && docker-compose up -d --build"
